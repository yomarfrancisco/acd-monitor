name: CI/CD Pipeline

on:
  push:
    branches: [ main, preview ]
    paths-ignore: [ '**.md' ]
  pull_request:
    branches: [ main, preview ]
    paths-ignore: [ '**.md' ]
  workflow_dispatch:

env:
  IS_PREVIEW: ${{ github.ref_name == 'preview' }}

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: Lint with flake8
      run: |
        if [ "${IS_PREVIEW}" = "true" ]; then
          flake8 src/
        else
          flake8 src/ scripts/
        fi
        
    - name: Run tests
      if: env.IS_PREVIEW != 'true'
      run: pytest -q
        
    - name: Health checks (dry-run)
      run: |
        echo "Running health checks in dry-run mode..."
        python scripts/run_overlap_sweep.py --help || echo "Sweep script available"
        python scripts/run_research_diagnostics.py --help || echo "Diagnostics script available"
        python scripts/run_auto_microstructure.py --help || echo "Auto microstructure script available"
        
    - name: Recon sweeps (dry-run)
      run: |
        echo "Running reconnaissance sweeps in dry-run mode..."
        python scripts/run_overlap_sweep.py --pair BTC-USD --export-dir exports/test --granularities "60,30" --min-durations "1,1" --coverage-threshold 0.95 --venues "binance,coinbase" --mode research --max-windows-per-level 1 --dry-run --verbose || echo "Dry-run completed"
        
    - name: Check for artifacts
      run: |
        echo "Checking for existing artifacts..."
        find exports/ -name "*.md" -o -name "*.json" -o -name "*.csv" | head -10 || echo "No artifacts found"
        find baselines/ -name "*.md" -o -name "*.json" | head -5 || echo "No baselines found"
        find court/ -name "*.md" -o -name "*.json" | head -5 || echo "No court data found"

  preview-demo-guard:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/preview'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for demo mode in preview
      run: |
        echo "Checking for demo mode configuration in preview branch..."
        
        # Check for NEXT_PUBLIC_USE_DEMO=1 in any config files
        if grep -r "NEXT_PUBLIC_USE_DEMO.*1" ui/cursor-dashboard/ 2>/dev/null; then
          echo "❌ ERROR: Demo mode detected in preview branch!"
          echo "Preview branch must use live data only."
          echo "Found NEXT_PUBLIC_USE_DEMO=1 in configuration files."
          exit 1
        fi
        
        # Check for FEED_MODE=demo in any config files
        if grep -r "FEED_MODE.*demo" ui/cursor-dashboard/ 2>/dev/null; then
          echo "❌ ERROR: Demo feed mode detected in preview branch!"
          echo "Preview branch must use live data only."
          echo "Found FEED_MODE=demo in configuration files."
          exit 1
        fi
        
        echo "✅ Preview branch configuration validated - no demo mode detected"
        echo "✅ Preview branch is configured for live data only"

  artifacts:
    runs-on: ubuntu-latest
    needs: [build-test, preview-demo-guard]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create artifacts directory
      run: mkdir -p artifacts
      
    - name: Collect exports
      run: |
        if [ -d "exports" ]; then
          echo "Collecting exports..."
          find exports/ -name "*.md" -o -name "*.json" -o -name "*.csv" | head -20
          tar -czf artifacts/exports.tgz exports/ || echo "No exports to archive"
        else
          echo "No exports directory found"
        fi
        
    - name: Collect baselines
      run: |
        if [ -d "baselines" ]; then
          echo "Collecting baselines..."
          find baselines/ -name "*.md" -o -name "*.json" | head -10
          tar -czf artifacts/baselines.tgz baselines/ || echo "No baselines to archive"
        else
          echo "No baselines directory found"
        fi
        
    - name: Collect court data
      run: |
        if [ -d "court" ]; then
          echo "Collecting court data..."
          find court/ -name "*.md" -o -name "*.json" | head -10
          tar -czf artifacts/court.tgz court/ || echo "No court data to archive"
        else
          echo "No court directory found"
        fi
        
    - name: Collect reports
      run: |
        echo "Collecting reports..."
        find . -name "*REPORT.md" -o -name "*DECISION.md" -o -name "*INDEX.json" -o -name "OVERLAP_SWEEP.md" | head -20
        find . -name "*REPORT.md" -o -name "*DECISION.md" -o -name "*INDEX.json" -o -name "OVERLAP_SWEEP.md" | xargs tar -czf artifacts/reports.tgz || echo "No reports to archive"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: acd-monitor-artifacts-${{ github.run_number }}
        path: artifacts/
        retention-days: 7
        
    - name: List artifacts
      run: |
        echo "Artifacts created:"
        ls -la artifacts/ || echo "No artifacts created"
        echo "Artifact sizes:"
        du -sh artifacts/* || echo "No artifacts to size"
