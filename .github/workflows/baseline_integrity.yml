name: Baseline Integrity

on: [push, pull_request]

jobs:
  check-baseline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -V
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
      - name: Smoke test scientific stack
        run: |
          python - <<'PY'
          import numpy, pandas, scipy, statsmodels
          from statsmodels.tsa.vector_ar.vecm import VECM, coint_johansen
          print("scientific stack OK")
          PY
      - name: Build baseline evidence bundle
        run: |
          python scripts/build_research_baseline_2s.py \
            --export-dir baselines/2s/evidence \
            --verbose
      - name: Reject mock/demo/empty parquet
        run: |
          set -e
          if ls baselines/2s/ticks/*/*mock*.parquet 2>/dev/null; then exit 1; fi
          if ls baselines/2s/ticks/*/*_demo*.parquet 2>/dev/null; then exit 1; fi
        shell: bash
      - name: Check for empty parquet files
        run: |
          python - <<PY
          import pathlib, sys
          root = pathlib.Path("baselines/2s/ticks")
          bad = []
          for f in root.rglob("*.parquet"):
              if f.stat().st_size == 0: bad.append(str(f))
          if bad:
              print("Empty parquet:", bad); sys.exit(1)
          PY
        shell: bash
      - name: Check for ABORT tags in analysis results
        run: |
          set -e
          if grep -r "\[ABORT:" baselines/2s/evidence/ 2>/dev/null; then
            echo "[CI:fail:abort_tags] Found ABORT tags in baseline evidence"
            exit 2
          fi
        shell: bash
      - name: Check InfoShare results
        run: |
          python - <<PY
          import json, sys
          try:
              with open("baselines/2s/evidence/info_share_results.json") as f:
                  data = json.load(f)
              if not data.get("bounds") or data["bounds"] == {}:
                  print("[CI:fail:infoshare_empty] InfoShare bounds are empty")
                  sys.exit(2)
          except FileNotFoundError:
              print("[CI:fail:infoshare_missing] InfoShare results not found")
              sys.exit(2)
          PY
        shell: bash
      - name: Check Spread results
        run: |
          python - <<PY
          import json, sys
          try:
              with open("baselines/2s/evidence/spread_results.json") as f:
                  data = json.load(f)
              if data.get("permutes", 0) < 1000:
                  print("[CI:fail:permutes_low] Spread permutations < 1000")
                  sys.exit(2)
          except FileNotFoundError:
              print("[CI:fail:spread_missing] Spread results not found")
              sys.exit(2)
          PY
        shell: bash
      - name: Debug Lead-Lag results
        shell: bash
        run: |
          set -e
          python - <<'PY'
          import json, sys, glob, pathlib
          fns = list(pathlib.Path(".").rglob("leadlag_results.json"))
          if not fns:
              print("[CI:debug] no leadlag_results.json found"); sys.exit(2)
          p = str(fns[0])
          d = json.load(open(p))
          print("[CI:debug] file=", p)
          print("[CI:debug] keys=", list(d.keys()))
          print("[CI:debug] venues_count=", d.get("venues_count"))
          edges = d.get("edges", [])
          print("[CI:debug] edges_count=", len(edges))
          print("[CI:debug] horizons=", d.get("horizons"))
          PY
      - name: Check Lead-Lag results
        shell: bash
        run: |
          python - <<'PY'
          import json, sys, glob, pathlib
          fns = list(pathlib.Path(".").rglob("leadlag_results.json"))
          if not fns:
              print("[CI:fail:leadlag_missing] leadlag_results.json missing"); sys.exit(2)
          d = json.load(open(str(fns[0])))
          vc = int(d.get("venues_count", 0) or 0)
          ec = int(d.get("edges_count", len(d.get("edges", []))) or 0)
          if vc >= 2 and ec == 0:
              print("[CI:fail:leadlag_empty] Lead-Lag edges are empty"); sys.exit(2)
          print("[CI:pass:leadlag] vc=", vc, " ec=", ec)
          PY