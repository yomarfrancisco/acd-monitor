name: CI/CD Pipeline

on:
  push:
    branches: [ main, preview ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IS_PREVIEW: ${{ startsWith(github.ref, 'refs/heads/preview') && '1' || '0' }}

permissions:
  contents: read

jobs:
  preview-demo-guard:
    if: github.ref == 'refs/heads/preview'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for demo mode in env files only
        run: |
          echo "Checking for demo mode in env files only..."
          # Fail if NEXT_PUBLIC_USE_DEMO=1 appears in any *.env* file
          if git grep -nE '^\s*NEXT_PUBLIC_USE_DEMO\s*=\s*1\s*$' -- ':!*' '*.env*' >/dev/null; then
            echo "ERROR: NEXT_PUBLIC_USE_DEMO=1 found in env files"; exit 1
          fi
          # Fail if FEED_MODE=demo appears in any *.env* file
          if git grep -nE '^\s*FEED_MODE\s*=\s*demo\s*$' -- ':!*' '*.env*' >/dev/null; then
            echo "ERROR: FEED_MODE=demo found in env files"; exit 1
          fi
          echo "OK: no demo settings found in env files"

  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: Lint with flake8
      run: |
        if [ "${IS_PREVIEW}" = "1" ]; then
          flake8 src/
        else
          flake8 src/ scripts/
        fi
        
    - name: Run tests
      if: env.IS_PREVIEW != '1'
      run: |
        python -V
        pip install -U pip
        # Only install test deps when tests actually run
        pip install -r requirements.txt
        # fallbacks in case extras are split
        pip install pytest psutil requests matplotlib || true
        pytest tests/ -v --tb=short

  ui:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/cursor-dashboard/package-lock.json
        
    - name: Install dependencies
      working-directory: ui/cursor-dashboard
      run: npm ci
      
    - name: Type check
      working-directory: ui/cursor-dashboard
      run: npx tsc --noEmit
      
    - name: Build
      working-directory: ui/cursor-dashboard
      run: npm run build
